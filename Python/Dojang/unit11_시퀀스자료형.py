'''
11. 시퀀스 자료형 활용하기

시퀀스 자료형 : 값(요소;element)이 연속적으로 이어진 자료형
ex. list, tuple, range, str, bytes, bytearray

<시퀀스 자료형의 공통기능>
- 특정 값이 있는지 확인
in(not in) 활용
ex. a = [1,2,3]
3 in a >>> True
'p' in 'python'

- 시퀀스 객체 연결하기(range는 불가)
+ 활용
ex. [5,3,6] + [8,9] >>> [5,3,6,8,9]

** 특정 자료형을 문자열로 변경하기 : str()
'hello' + str(10) >> 'hello 10'

- 시퀀스 객체 반복하기(range는 불가)
* 활용
시퀀스 객체 * 반복횟수
[1,2,3] * 3 >>> [1,2,3,1,2,3,1,2,3]


<길이 구하기>
len(리스트 혹은 튜플 변수)
len(range())
len(문자열 변수) * 공백 포함

<인덱스>
[]로 원하는 자리의 값 가져오기

** __getitem__ 메서드
시퀀스 객체에서 []를 사용하면 실제로는 __getitem__ 메서드를 호출하여 요소를 가져옴.
따라서 실제 __getitem__ 메서드를 직접 호출하여 요소를 가져올 수 있음

** 음수 인덱스
a 시퀀스 자료형에서, 뒤에서 n번째 자리의 값을 가져오기 :  a[-n]

** 요소에 값 할당하기
시퀀스객체[인덱스] = 값
단, 튜플과 range는 요소 변경 불가능

<요소 삭제>
del 활용 del 시퀀스객체[인덱스] -> 제거된 값을 리턴하진 않음.
튜플과 range는 삭제 불가능
* 리스트에서는 .pop(인덱스넘버) 활용하기 

<슬라이스>
시퀀스객체[시작인덱스:끝인덱스] 
-> 시작 인덱스 ~ 끝 인덳 -1 까지 가져옴
a[4:-1] : 인덱스 4부터 -2(뒤에서 두번째)까지 요소 가져옴

<증가폭>
시퀀스객체[시작인덱스:끝인덱스:증가폭]
증가폭은 음수로 지정할 수 있음. 단 끝 인덱스보다 시작 인덱스가 커야 함

<slice 객체 사용하기>
파이썬에서는 slice 객체를 사용하여 시컨스 객체를 잘라낼 수 있다.
슬라이스객체 = slice(끝인덱스)
슬라이스객체 = slice(시작 인덱스, 끝 인덱스)
슬라이스객체 = slice(시작 인덱스, 끝 인덱스, 증가폭)
시퀀스객체[슬라이스객체]
시퀀스객체.__getitem__(슬라이스객체)

<슬라이스에 요소 할당하기>
시퀀스객체[시작인덱스:끝인덱스] = 시퀀스객체
원래 있던 리스트가 변경됨. 새 리스트 생성 x
** 할당할 요소 개수가 슬라이스 범위보다 크거나 작아도 상관없음
할당할 요소 만큼 리스트의 요소 개수가 줄어들거나 늘어나기 때문
>>> a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
>>> a[2:5] = ['a', 'b', 'c', 'd', 'e'] # 인덱스 2부터 4까지 값 5개를 할당하여 요소의 개수가 늘어남
>>> a
[0, 10, 'a', 'b', 'c', 'd', 'e', 50, 60, 70, 80, 90]

** 인덱스 증가폭을 지정하는 경우, 슬라이스 범위의 요소 개수와 할당할 요소 개수가 정확하게 일치해야 함.
** 튜플, range, 문자열은 슬라이스 범위를 지정하더라도 요소 할당 불가능

'''

# getitem
a = [1,2,3,4,5]
print(a.__getitem__(1)) # a[1]과 동일한 결과

# 음수 인덱스
r = range(0,10,2)
print(r, type(r))
print(r[-3])

# del
temp = [1,2,3,4,50]
del_val = temp.pop(2) # index 2의 값 빼내기
del_temp = temp # del temp[2]
print(del_val)
print(del_temp)

# slice
print('slice')
sl = slice(0,6,2) # 인덱스 0 ~ 5까지 2개씩 자르는 슬라이스 객체 생성
lis1 = [1,2,3,4,5,6,7,8,9,10]
print(lis1[sl])
print(lis1.__getitem__(sl))

# 연습문제
year = [2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018]
population = [10249679, 10195318, 10143645, 10103233, 10022181, 9930616, 9857426, 9838892]
print(year[5:]) # print(year[-3:])
print(population[5:]) # print(population[-3:])

# 연습문제
n = -32, 75, 97, -10, 9, 32, 4, -15, 0, 76, 14,2
print(n[1::2]) # n[1:12:2] or n[1:len(n):2]

# 심사문제
x = input().split()
temp = x[:-5] # 마지막 5개 요소 삭제
# 혹은 del x[-5:]
print(tuple(temp))

# 심사문제
id_odd, id_even = input().split()
trim1= id_odd[1::2]
trim2 = id_even[::2]
print(trim1+trim2)